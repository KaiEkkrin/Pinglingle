@page "/digests"

@inject HttpClient Http

<PageTitle>Digests</PageTitle>

<h1>Digests</h1>

@foreach (var (address, digests) in _digestsByAddress)
{
    <DigestChart Title=@address Digests=@digests />
}

<!-- TODO Navigation between digests for particular dates -->

@code {
    // TODO Make this a URL parameter, not fixed.
    private readonly DateTimeOffset _digestDate = DateTimeOffset.Now.Date;

    private SortedDictionary<string, List<Digest>> _digestsByAddress = new();

    protected override async Task OnInitializedAsync()
    {
        var targetsById = await GetTargetsAsync();

        // TODO For now this won't be responsive -- you'll need to reload the page to
        // see updated entries. That should be okay
        // Fetch the digests.
        var oldest = _digestDate.ToUnixTimeSeconds();
        var newest = _digestDate.AddDays(1).ToUnixTimeSeconds();
        var response = await Http.GetFromJsonAsync<List<Digest>>(
            $"Digests?oldest={oldest}&newest={newest}");
        if (response is { } digests)
        {
            foreach (var g in response.GroupBy(d => d.TargetId))
            {
                if (g.Key is not { } targetId ||
                    !targetsById.TryGetValue(targetId, out var target)) continue;

                _digestsByAddress[target.Address] = g.ToList();
            }
        }
    }

    private async Task<IDictionary<long, Target>> GetTargetsAsync()
    {
        var response = await Http.GetFromJsonAsync<List<Target>>("Targets");
        if (response is { } targets)
        {
            return targets.ToDictionary(t => t.Id);
        }

        return new Dictionary<long, Target>();
    }
}