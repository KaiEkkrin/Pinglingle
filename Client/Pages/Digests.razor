@page "/digests"

@inject HttpClient Http

<PageTitle>Digests</PageTitle>

<h1>Digests</h1>

<DigestCharts Date=@_currentDate TargetsById=@_targetsById />

<div class="container">
    <div class="row">
        <div class="col"></div>
        <div class="col">
            @if (ShowEarliestDate)
            {
                <button type="button" class="btn btn-link"
                        @onclick="OnSetEarliestDate">&lt;&lt;</button>
            }
            @if (ShowLastDate)
            {
                <button type="button" class="btn btn-link"
                        @onclick="OnSetLastDate">&lt;</button>
            }
            @(_currentDate.ToShortDateString())
            @if (ShowNextDate)
            {
                <button type="button" class="btn btn-link"
                        @onclick="OnSetNextDate">&gt;</button>
            }
            @if (ShowLatestDate)
            {
                <button type="button" class="btn btn-link"
                        @onclick="OnSetLatestDate">&gt;&gt;</button>
            }
        </div>
        <div class="col"></div>
    </div>
</div>

@code {
    private readonly DateTime _latestDate = DateTimeOffset.Now.Date;
    private DateTime _earliestDate = DateTimeOffset.Now.Date;

    private Dictionary<long, Target> _targetsById = new();

    public DateTime _currentDate { get; set; }

    private bool ShowEarliestDate => _currentDate > _earliestDate.AddDays(1);
    private bool ShowLastDate => _currentDate > _earliestDate;
    private bool ShowNextDate => _currentDate < _latestDate;
    private bool ShowLatestDate => _currentDate < _latestDate.AddDays(-1);

    protected override async Task OnInitializedAsync()
    {
        _currentDate = _latestDate;
        _targetsById = await GetTargetsAsync();

        // Get the oldest sample -- lets us set our min date
        var response = await Http.GetFromJsonAsync<List<Digest>>("Digests?count=1");
        if (response is { Count: 1 } oldestSamples)
        {
            _earliestDate = oldestSamples[0].StartTime.Date;
            Console.WriteLine("Received min date {0}", _earliestDate);
        }
    }

    protected void OnSetEarliestDate(MouseEventArgs mouseEventArgs)
    {
        _currentDate = _earliestDate;
    }

    protected void OnSetLastDate(MouseEventArgs mouseEventArgs)
    {
        _currentDate = _currentDate.AddDays(-1);
    }

    protected void OnSetNextDate(MouseEventArgs mouseEventArgs)
    {
        _currentDate = _currentDate.AddDays(1);
    }

    protected void OnSetLatestDate(MouseEventArgs mouseEventArgs)
    {
        _currentDate = _latestDate;
    }

    private async Task<Dictionary<long, Target>> GetTargetsAsync()
    {
        var response = await Http.GetFromJsonAsync<List<Target>>("Targets");
        if (response is { } targets)
        {
            return targets.ToDictionary(t => t.Id);
        }

        return new Dictionary<long, Target>();
    }
}