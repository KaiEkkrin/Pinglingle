@page "/"
@using System.Net.NetworkInformation
@using Microsoft.AspNetCore.SignalR.Client

@inject HttpClient Http
@inject NavigationManager NavigationManager

@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<h1>Status</h1>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Address</th>
            <th>Last 5 minutes (5th &lt; 50th &lt; 95th %ile, Errors)</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var (address, target) in _targets)
        {
            <tr>
                <td>@address</td>
                <td>@GetSampleString(target)</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private static readonly TimeSpan MaxSampleAge = TimeSpan.FromMinutes(5);

    private HubConnection? _hubConnection;
    private SortedDictionary<string, Target> _targets = new();

    private static string GetSampleString(Target target)
    {
        // TODO make nice CSS and all that
        IEnumerable<int> EnumerateRealSamples()
        {
            foreach (var s in target.Samples)
            {
                if (s.ResponseTimeMillis.HasValue) yield return s.ResponseTimeMillis.Value;
            }
        }

        IEnumerable<IPStatus> EnumerateErrors()
        {
            foreach (var s in target.Samples)
            {
                if (s.ResponseTimeMillis is null) yield return s.Status;
            }
        }

        var realSamples = EnumerateRealSamples().ToList();
        realSamples.Sort();
        var p5 = MathUtil.Percentile(realSamples, 5.0);
        var p50 = MathUtil.Percentile(realSamples, 50.0);
        var p95 = MathUtil.Percentile(realSamples, 95.0);
        return $"{target.Samples.Count} samples : {p5:F2}ms < {p50:F2}ms < {p95:F2}ms, {EnumerateErrors().Count()} errors";
    }

    protected override async Task OnInitializedAsync()
    {
        // Fetch the initial list of targets
        var response = await Http.GetFromJsonAsync<List<Target>>("Targets");
        if (response is { } targets)
        {
            foreach (var target in targets)
            {
                _targets[target.Address] = target;
            }

            StateHasChanged();
        }

        // For each target, fetch samples within the last 5 minutes
        var oldest = (DateTimeOffset.UtcNow - MaxSampleAge).ToUnixTimeSeconds();
        foreach (var (_, target) in _targets)
        {
            var samples = await Http.GetFromJsonAsync<List<Sample>>($"Samples?targetId={target.Id}&oldest={oldest}");
            if (samples is not null)
            {
                target.Samples.AddRange(samples);
            }
        }

        // Connect the SignalR hub to keep fetching targets and samples
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/pinghub"))
            .Build();

        _hubConnection.On<Sample>("Sample", sample =>
        {
            if (_targets.TryGetValue(sample.Target?.Address ?? string.Empty, out var target))
            {
                // Add this sample
                target.Samples.Add(sample);

                // Remove samples older than 5 minutes. Can assume samples are ordered.
                var threshold = DateTimeOffset.UtcNow - MaxSampleAge;
                while (target.Samples.First().Date <= threshold)
                {
                    target.Samples.RemoveAt(0);
                }

                StateHasChanged();
            }
        });

        _hubConnection.On<Target>("Target", target =>
        {
            if (!_targets.ContainsKey(target.Address))
            {
                _targets[target.Address] = target;
                StateHasChanged();
            }
        });

        _hubConnection.On<Target>("TargetDeleted", target =>
        {
            if (_targets.ContainsKey(target.Address))
            {
                _targets.Remove(target.Address);
                StateHasChanged();
            }
        });

        await _hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}