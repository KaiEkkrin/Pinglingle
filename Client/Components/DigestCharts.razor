@inject HttpClient Http

@foreach (var (address, x) in _digestsByAddress)
{
    <DigestChart @key=x.Key Title=@address Digests=@x.Digests />
}

@code {
    private SortedDictionary<string, (string Key, List<Digest> Digests)> _digestsByAddress = new();

    [Parameter]
    public DateTime Date { get; set; }

    [Parameter]
    public Dictionary<long, Target> TargetsById { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        _digestsByAddress.Clear();

        // TODO For now this won't be responsive -- you'll need to reload the page to
        // see updated entries. That should be okay
        // Fetch the digests.
        var oldest = new DateTimeOffset(Date).ToUnixTimeSeconds();
        var newest = new DateTimeOffset(Date).AddDays(1).ToUnixTimeSeconds();
        var response = await Http.GetFromJsonAsync<List<Digest>>(
            $"Digests?oldest={oldest}&newest={newest}");
        if (response is { } digests)
        {
            foreach (var g in response.GroupBy(d => d.TargetId))
            {
                if (g.Key is not { } targetId ||
                    !TargetsById.TryGetValue(targetId, out var target)) continue;

                // Fully updating Plotly charts seems pretty painful so I'll
                // cause the components to be re-made instead by creating new
                // unique keys.
                _digestsByAddress[target.Address] = (Guid.NewGuid().ToString(), g.ToList());
            }
        }
    }
}