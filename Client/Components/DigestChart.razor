@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces

<PlotlyChart @bind-Config="_config" @bind-Layout="_layout" @bind-Data="_data" />

@code {
    private PlotlyChart _chart = new();
    private Config _config = new();

    private Layout _layout = new Layout
    {
        Title = new Title
        {
        },
        XAxis = new List<XAxis>
        {
            new XAxis
            {
                Title = new()
                {
                    Text = "Date and time"
                },
                TickFormat = "%H:%M",
                ZeroLine = true
            }
        },
        YAxis = new List<YAxis>
        {
            new YAxis
            {
                Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title
                {
                    Text = "Response Time (ms)"
                },
                Range = new List<object> { 0, Math.Log10(2000) },
                Type = Plotly.Blazor.LayoutLib.YAxisLib.TypeEnum.Log,
                ZeroLine = true
            },
            new YAxis
            {
                Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title
                {
                    Text = "% of errors"
                },
                Overlaying = "y",
                Range = new List<object> { 0, 100 },
                ShowGrid = false,
                Side = Plotly.Blazor.LayoutLib.YAxisLib.SideEnum.Right,
                ZeroLine = true
            }
        },
        BarMode = BarModeEnum.Stack,
    };

    private IList<ITrace> _data = new List<ITrace>();

    [Parameter]
    public IReadOnlyCollection<Digest> Digests { get; set; } = new List<Digest>();

    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    public DateTimeOffset StartDate { get; set; }

    [Parameter]
    public DateTimeOffset EndDate { get; set; }

    protected override void OnParametersSet()
    {
        _data.Clear();
        if (Digests.Count == 0) return;

        // Set up the chart stuff here.
        // (Gratuitously adding 1 to all the sample values because I don't want
        // to be calculating Log10(0)...)
        _layout.Title.Text = Title;
        _layout.XAxis[0].Range = new List<object>
        {
            StartDate.LocalDateTime, EndDate.LocalDateTime
        };
        _data.Add(new Bar
        {
            Name = "5%",
            Opacity = 0.7m,
            X = Digests.Select(d => (object)d.StartTime.LocalDateTime)
                .ToList(),
            Y = Digests.Select(d => (object)(1 + d.Percentile5)).ToList()
        });

        _data.Add(new Bar
        {
            Name = "50%",
            Opacity = 0.7m,
            X = Digests.Select(d => (object)d.StartTime.LocalDateTime)
                .ToList(),
            Y = Digests.Select(d => (object)(d.Percentile50 - d.Percentile5))
                .ToList()
        });

        _data.Add(new Bar
        {
            Name = "95%",
            Opacity = 0.7m,
            X = Digests.Select(d => (object)d.StartTime.LocalDateTime)
                .ToList(),
            Y = Digests.Select(d => (object)(d.Percentile95 - d.Percentile50))
                .ToList()
        });

        _data.Add(new Scatter
        {
            Name = "Error %",
            X = Digests.Select(d => (object)d.StartTime.LocalDateTime)
                .ToList(),
            Y = Digests.Select(d => (object)(100 * d.ErrorCount / d.SampleCount))
                .ToList(),
            YAxis = "y2"
        });
    }
}