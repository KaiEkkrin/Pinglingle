@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces

<PlotlyChart @bind-Config="_config" @bind-Layout="_layout" @bind-Data="_data" />

@code {
    private PlotlyChart _chart = new();
    private Config _config = new();

    private Layout _layout = new Layout
    {
        Title = new Title
        {
        },
        XAxis = new List<XAxis>
        {
            new XAxis
            {
                Title = new Plotly.Blazor.LayoutLib.XAxisLib.Title
                {
                    Text = "Hour"
                },
                Range = new List<object> { 0, 24 },
                ZeroLine = true
            }
        },
        YAxis = new List<YAxis>
        {
            new YAxis
            {
                Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title
                {
                    Text = "Response Time (ms)"
                },
                Range = new List<object> { 0, Math.Log10(2000) },
                Type = Plotly.Blazor.LayoutLib.YAxisLib.TypeEnum.Log,
                ZeroLine = true
            },
            new YAxis
            {
                Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title
                {
                    Text = "% of errors"
                },
                Overlaying = "y",
                Range = new List<object> { 0, 100 },
                ShowGrid = false,
                Side = Plotly.Blazor.LayoutLib.YAxisLib.SideEnum.Right,
                ZeroLine = true
            }
        },
        BarMode = BarModeEnum.Stack,
    };

    private IList<ITrace> _data = new List<ITrace>();

    private List<Digest> _digests = new();

    [Parameter]
    public IReadOnlyCollection<Digest> Digests
    {
        get => _digests;
        set
        {
            _digests.Clear();
            _digests.AddRange(value);

            // Set up the chart stuff here.
            var startOfDay = _digests.Min(d => d.StartTime).Date;
            _data.Clear();
            _data.Add(new Bar
            {
                Name = "5%",
                Opacity = 0.7m,
                X = _digests.Select(d => (object)(d.StartTime - startOfDay).TotalHours)
                    .ToList(),
                Y = _digests.Select(d => (object)d.Percentile5).ToList()
            });

            _data.Add(new Bar
            {
                Name = "50%",
                Opacity = 0.7m,
                X = _digests.Select(d => (object)(d.StartTime - startOfDay).TotalHours)
                    .ToList(),
                Y = _digests.Select(d => (object)(d.Percentile50 - d.Percentile5))
                    .ToList()
            });

            _data.Add(new Bar
            {
                Name = "95%",
                Opacity = 0.7m,
                X = _digests.Select(d => (object)(d.StartTime - startOfDay).TotalHours)
                    .ToList(),
                Y = _digests.Select(d => (object)(d.Percentile95 - d.Percentile50))
                    .ToList()
            });

            _data.Add(new Scatter
            {
                Name = "Error %",
                X = _digests.Select(d => (object)(d.StartTime - startOfDay).TotalHours)
                    .ToList(),
                Y = _digests.Select(d => (object)(100 * d.ErrorCount / d.SampleCount))
                    .ToList(),
                YAxis = "y2"
            });

            StateHasChanged();
        }
    }

    [Parameter]
    public string Title
    {
        get => _layout.Title.Text;
        set
        {
            _layout.Title.Text = value;
            StateHasChanged();
        }
    }
}